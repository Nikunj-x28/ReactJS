USE_EFFECT
Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.
Sending a message in the chat is an event because it is directly caused by the user clicking a specific button.
However, setting up a server connection is an Effect because it should happen no matter which interaction
caused the component to appear. Effects run at the end of a commit after the screen updates. This is
a good time to synchronize the React components with some external system (like network or a third-party library).\

useEffect() hook accepts 2 arguments:

useEffect(callback[, dependencies]);
callback is a function that contains the side-effect logic. callback is executed right after the DOM update.
dependencies is an optional array of dependencies. useEffect() executes callback only if the dependencies have
changed between renderings.

Put your side-effect logic into the callback function, then use the dependencies argument to control when
you want the side-effect to run. That's the sole purpose of useEffect().

        import { useEffect } from 'react';

        function Greet({ name }) {
        const message = `Hello, ${name}!`;   // Calculates output

        useEffect(() => {
            // Good!
            document.title = `Greetings to ${name}`; // Side-effect!
        }, [name]);

        return <div>{message}</div>;         // Calculates output
        }
        For example, in the above code snippet you saw the useEffect() in action:
        useEffect(() => {
        document.title = `Greetings to ${name}`;
        }, [name]);
        The document title update is the side-effect because it doesn't directly calculate the component
        output. That's why the document title update is placed in a callback and supplied to useEffect().
        Also, you don't want the document title update to run every time Greet component renders. You only
        want it to happen when the name prop changes — that's the reason you supplied name as a dependency
        to useEffect(callback, [name]).

dependencies argument of useEffect(callback, dependencies) lets you control when the side-effect runs.
If dependencies are:
A. Not provided: the side-effect runs after every rendering.
B. An empty array []: the side-effect runs once after the initial rendering.

Adding Cleanup ->
useEffect(() => {
    const connection = createConnection();
    connection.connect();
    return () => {
      connection.disconnect();  // we return a Cleanup function
    };
  }, []);

When you’re not sure whether some code should be in an Effect or in an event handler, ask yourself why this
code needs to run. Use Effects only for code that should run because the component was displayed to the user. 