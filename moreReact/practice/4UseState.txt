REACT HOOKS
Hooks let you use different React features from your components. You can either use the built-in Hooks or
 combine them to build your own.


The useState Hook provides those two things:
1. A state variable to retain the data between renders.
2. A state setter function to update the variable and trigger React to render the component again.

When you call useState, you are telling React that you want this component to remember something

State is local to a component instance on the screen. In other words, if you render the same component twice,
each copy will have completely isolated state! Changing one of them will not affect the other.
Unlike props, state is fully private to the component declaring it.

What if you wanted both components to keep their states in sync? The right way to do it in React is to
remove state from child components and add it to their closest shared parent.


You might have noticed that the useState call does not receive any information about which state
variable it refers to.
Internally, React holds an array of state pairs for every component. It also maintains the current pair index,
which is set to 0 before rendering. Each time you call useState, React gives you the next state pair and
increments the index.

Why you cannot call `use` hooks within conditionals or loops ?
= We are dealing with a cursor pointing to a set of arrays, if you change the order of the calls within render,
  the cursor will not match up to the data and your use calls will not point to the correct data or handlers.

