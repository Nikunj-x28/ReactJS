Setting Up a React App ourselves.

1. npm init 
= sets ups the package.json file (a config file for npm)

2. npm install parcel -d (-d => makes it a dev dependency)
= installs parcel

3. npx parcel source file (index.html)
=  
Parcel Initialization: Parcel initializes and sets up its build process.

Bundle Generation: Parcel analyzes the specified source file (index.html in the above example) and its
       dependencies, such as JavaScript, CSS, images, etc.

Dependency Resolution: Parcel resolves and bundles all dependencies, including transpiling modern JavaScript
       (ES6+), processing CSS with PostCSS, optimizing images, etc.

Output Generation: Parcel generates the bundled output in the specified output directory (usually dist/
        by default).

Server (Optional): If you specify an HTML file as the entry point, Parcel can also start a development
        server with hot module reloading, allowing you to view and test your application locally.


4. npm install react
= installs React

5. npm install react-dom
= installs react-dom

# make sure your Javascript file has type="module" otherwise it wont be able to recognize import commmands.

6. We can then set up required scripts in package.json.



When you push your React code to production, the package.json file itself is not sent to the user's browser.
The package.json file is primarily used for managing dependencies and scripts for your project during
development.

What gets sent to the user's browser are the files that are generated after building your React application.
When you build a React project for production, the build process generates static files (such as HTML, CSS,
and JavaScript files) that are optimized for performance and ready to be served to users.


Suppose I have version 2.4 of react as my dependency then it gets a newer version 2.5 so if i use ^
in package.json does the react dependency automatically gets updated.
=
ChatGPT Answer
Yes, if you use the caret ^ symbol in your package.json to specify your React dependency version, it indicates 
that you're willing to accept updates for the dependency as long as they are backward-compatible with
the specified version.
For example, if you have "react": "^2.4" in your package.json, it means that you are using version
2.4 of React, but you're willing to accept any new version of React that is greater than or equal to 2.4
but less than 3.0 (since the caret symbol considers only the non-major version updates to be
backward-compatible).
If a newer version like 2.5 becomes available, running npm install or npm update will update your react
dependency to version 2.5, as long as it is compatible with the range specified in your package.json.

