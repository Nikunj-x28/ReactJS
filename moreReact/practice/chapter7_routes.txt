CORS
Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate
any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources.
CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the
cross-origin resource, in order to check that the server will permit the actual request. In that preflight,
the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.
If the server's CORS policy does not allow the cross-origin request, the browser will block the request and
generate a CORS error, which is typically visible in the browser's developer console.
The CORS proxy cannot override the restrictions imposed by the server itself. 


REACT-ROUTER DOM LIBRARY 
In React, a route refers to a mapping between a URL path and a React component. 
Here's how routes work in React:

Setting Up Routes: First, you need to define your routes. You specify which component should be shown for each route. For example, you might have a route for the homepage, another for a contact page, and so on.

Navigating Between Routes: You use links (like <a> tags in HTML) to navigate between different routes. In React, you typically use a special component called <Link> from a library like React Router. When you click on a link, React Router changes the URL in the browser, triggering the display of the corresponding component for that route.

Route Matching: When the URL changes, React Router looks at the defined routes and matches the current URL to one of those routes. If there's a match, React Router shows the component associated with that route. If there's no match, it might show a 404 error page or a default component.


CLIENT SIDE ROUTING (vs SERVER SIDE ROUTING)
React Router enables "client side routing".
In traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.

Client side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.

This enables faster user experiences because the browser doesn't need to request an entirely new document or re-evaluate CSS and JavaScript assets for the next page. It also enables more dynamic user experiences with things like animation.

Client side routing is enabled by creating a Router and linking/submitting to pages with Link and <Form>.
Single Page Applications (SPAs): Client-side routing is commonly used in SPAs where the initial HTML page is loaded once, and subsequent navigation and content updates are handled dynamically by JavaScript running in the browser.


STEPS IN CLIENT SIDE ROUTING
When a user clicks on a Link component, React Router intercepts the click event, prevents the default browser behavior (i.e., full page reload), and instead updates the URL in the browser's address bar and renders the corresponding component for the new route.

Updating the URL: Instead of performing a full-page reload, the client-side routing framework updates the URL in the browser's address bar using the HTML5 History API (history.pushState() or history.replaceState()). This change in the URL is reflected in the browser's history stack.

Rendering Components: After updating the URL, the routing framework determines which component(s) should be rendered based on the new URL. It renders the appropriate component(s) in the browser without reloading the entire page.


Bubbling
When a route does not have an errorElement, errors will bubble up through parent routes. This lets you get as granular or general as you like.

Put an errorElement at the top of your route tree and handle nearly every error in your app in one place. Or, put them on all of your routes and allow the parts of the app that don't have errors to continue to render normally. This gives the user more options to recover from errors instead of a hard refresh and ü§û.


In React Router 6, a new hook was introduced called useRouteError. This hook allows you to access the current error state of the router.
The useRouteError hook
The useRouteError hook returns an object with the following properties:
error: The current error object, or null if there is no error.
isError: A boolean indicating whether or not there is an error.
message: The error message, or undefined if there is no error.


DYNAMIC ROUTING
To fully appreciate the benefits of dynamic routing, it's helpful to compare it with static routing. In static routing, each route is hard-coded into the application. This means that every possible route must be defined in advance, which can be time-consuming and error-prone, especially for large applications.

On the other hand, dynamic routing allows routes to be generated dynamically, eliminating the need for manual route definition. This not only saves time and reduces the risk of errors but also allows for greater flexibility. For instance, you can easily add, modify, or remove routes based on user input or application state, something that's not possible with static routing.

HOW A ROUTER COMPONENT WORKS
( createBrowserRouter => we will mostly use this router component )
Wrapper Component: The Router component acts as a wrapper around your application's UI components. You typically wrap your entire application with the Router component to enable routing for all parts of your application.

Route Matching: When a URL change occurs, the Router component matches the current URL against the defined routes in your application. It compares the URL path with the paths specified in the Route components and determines which components should be rendered based on the match.

Rendering Components: Once the Router determines which components should be rendered based on the URL match, it renders these components as part of the application's UI. It passes routing-related information (such as match props) to these components so they can react accordingly.

History Management: The Router component also manages the history stack, which keeps track of the user's navigation history. It allows users to navigate back and forth between previously visited URLs using the browser's back and forward buttons or programmatically through methods provided by React Router.

Nested Routers: You can nest Router components to create nested routing hierarchies within your application. This is useful for organizing routes and rendering different sets of components based on URL segments.


REACT CONTEXT API
Context in React is used for sharing data between components in a component tree. It allows you to pass data through the component tree without having to pass props down manually at every level.

In other words, context provides a way to make certain data accessible to many components in your application, regardless of how deeply nested they are in the component tree. 
The React Context API is a feature in React that allows you to pass context.

import { LevelContext } from './LevelContext.js';

export default function Section({ level, children }) {
  return (
    <section className="section">
      <LevelContext.Provider value={level}>
        {children}
      </LevelContext.Provider>
    </section>
  );
}
This tells React: ‚Äúif any component inside this <Section> asks for LevelContext, give them this level.‚Äù The component will use the value of the nearest <LevelContext.Provider> in the UI tree above it.

OUTLET
The Outlet component acts as a placeholder within a parent route's component tree where child routes should be rendered dynamically. It's similar to a slot in web components or a placeholder in other templating systems.
You can have multiple Outlet components within your route components to specify different locations for rendering child routes, depending on your application's layout requirements.




