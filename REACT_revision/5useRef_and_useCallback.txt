USE_CALLBACK
useCallback is a React Hook that lets you cache a function definition between re-renders.
const cachedFn = useCallback(fn, dependencies)

On the initial render, useCallback returns the fn function you have passed.

During subsequent renders, it will either return an already stored fn  function from the last render
(if the dependencies haven’t changed), or return the fn function you have passed during this render.

You need to pass two things to useCallback:
A function definition that you want to cache between re-renders.
A list of dependencies including every value within your component that’s used inside your function.


USE_REF
When you want a component to “remember” some information, but you don’t want that information to trigger new
renders, you can use a ref.
You can add a ref to your component by importing the useRef Hook from React:
    import { useRef } from 'react';

Inside your component, call the useRef Hook and pass the initial value that you want to reference as the
only argument. For example, here is a ref to the value 0:
    const ref = useRef(0);

useRef returns an object like this:
    { 
    current: 0 // The value you passed to useRef
    }


******* Use case: implementing a stopwatch ********
You can store inside a reference infrastructure data of side effects: timer ids, socket ids, etc.

The component Stopwatch uses setInterval(callback, time) timer function to increase each second the counter
of a stopwatch. The timer id is stored in a reference timerIdRef:

        import { useRef, useState, useEffect } from 'react';

        function Stopwatch() {
        const timerIdRef = useRef(0);
        const [count, setCount] = useState(0);

        const startHandler = () => {
            if (timerIdRef.current) { return; }
            timerIdRef.current = setInterval(() => setCount(c => c+1), 1000);
        };

        const stopHandler = () => {
            clearInterval(timerIdRef.current);
            timerIdRef.current = 0;
        };

        useEffect(() => {
            return () => clearInterval(timerIdRef.current);
        }, []);

        return (
            <div>
            <div>Timer: {count}s</div>
            <div>
                <button onClick={startHandler}>Start</button>
                <button onClick={stopHandler}>Stop</button>
            </div>
            </div>
        );
        }

Treat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much
of your application logic and data flow relies on refs, you might want to rethink your approach.

Don’t read or write ref.current during rendering. If some information is needed during rendering, 
use state instead. 

You can point a ref to any value. However, the most common use case for a ref is to access a DOM element.
For example, this is handy if you want to focus an input programmatically. When you pass a ref to a ref
attribute in JSX, like <div ref={myRef}>, React will put the corresponding DOM element into myRef.current.
Once the element is removed from the DOM, React will update myRef.current to be null